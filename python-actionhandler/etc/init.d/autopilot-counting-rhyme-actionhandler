#!/bin/sh
#
# gunicorn_sr        Startup script for gunicorn for sr
#
# chkconfig: - 86 14
# processname: autopilot-counting-rhyme-actionhandler.py
# pidfile: autopilot-counting-rhyme-actionhandler.pid
# description: ActionHandler for Counting Rhymes
#
### BEGIN INIT INFO
# Provides: autopilot-counting-rhyme-actionhandler
# Required-Start: $local_fs $remote_fs $network
# Required-Stop: $local_fs $remote_fs $network
# Default-Start: 3
# Default-Stop: 0 1 2 4 5 6
# Short-Description: start and stop conting rhyme actionhandler
### END INIT INFO

# Source function library.
. /etc/rc.d/init.d/functions

prog=autopilot-counting-rhyme-actionhandler
VENV=/opt/autopilot/engine/python-actionhandler
pidfile=/var/run/autopilot-counting-rhyme-actionhandler.pid
RETVAL=0


start() {
    echo -n $"Starting $prog: "
    . "$VENV/bin/activate"
    autopilot-counting-rhyme-actionhandler.py start
    RETVAL=$?
    echo -n
    [ $RETVAL = 0 ] && echo -e '[\e[32m OK \e[m]'
    return $RETVAL
}

stop() {
    echo -n $"Stopping $prog: "
    CURRPID=$(cat ${pidfile})
    killproc -p ${pidfile} ${prog} -TERM
    RETVAL=$?
    while ps -p $CURRPID >/dev/null 2>&1
      do
        sleep 1
      done
    echo
    [ $RETVAL = 0 ] && rm -f ${pidfile}
}

restart() {
    stop
    start
}

rh_status() {
    status -p ${pidfile} ${prog}
}

# See how we were called.
case "$1" in
    start)
        rh_status >/dev/null 2>&1 && exit 0
        start
        ;;
    stop)
        stop
        ;;
    restart)
        restart
        ;;
    status)
        rh_status
        RETVAL=$?
        ;;
    *)
        echo $"Usage: $prog {start|stop|restart|status|help}"
        RETVAL=2
esac

exit $RETVAL
